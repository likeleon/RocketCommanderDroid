#version 100
precision mediump int;
precision mediump float;

attribute vec4 position;
attribute vec2 uv0;
attribute vec3 normal;
attribute vec3 tangent;

varying vec4 oPosition;
varying vec2 oUv0;
varying vec3 oLightDir;
varying vec3 oEyeDir;
varying float oBackFaceFactor;

uniform mat4 worldViewProj;
uniform vec4 lightPosition;
uniform vec3 eyePosition;

// Compute the 3x3 transform from tangent space to object space
mat3 ComputeTangentMatrix(vec3 tangent, vec3 normal)
{
	return mat3(tangent, cross(tangent, normal), normal);
}

// Returns light direction from light position and vertex position
vec3 GetLightDirection(vec4 lightPosition, vec4 position)
{
    // calculate tangent space light vector
    // Get object space light direction
    // Non-normalised since we'll do that in the fragment program anyway
    return lightPosition.xyz -  (position.xyz * lightPosition.w);
}

// Returns eye direction from eye position and vertex position
vec3 GetEyeDirection(vec3 eyePosition, vec4 position)
{
	return eyePosition - position.xyz;
}

void main()
{
	gl_Position = worldViewProj * position;
	
	// Copy texture coordinates for diffuse and normal maps	
	oUv0 = uv0;
	
	// Compute the 3x3 transform from tangent space to object space
	mat3 worldToTangentSpace = ComputeTangentMatrix(tangent, normal);
	
	// Transform light vector and pass it as a color (clamped from 0 to 1)
	vec3 lightDir = GetLightDirection(lightPosition, position);
	vec3 eyeDir = GetEyeDirection(eyePosition, position);
	
	oLightDir = normalize(worldToTangentSpace * lightDir);
	oEyeDir = normalize(worldToTangentSpace * eyeDir);
	
	// Little helper to darken back face areas, looks more realistic on asteroids
	float x = dot(normalize(normal), lightDir);
	oBackFaceFactor = 0.25 + 0.75 * clamp(x + 0.5, 0.0, 1.0);
}
